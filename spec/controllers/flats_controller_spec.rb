require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe FlatsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Flat. As you add validations to Flat, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {FactoryBot.attributes_for(:flat)}

  let(:invalid_attributes) {{longitude: 120, latitude: 45, price: -6.3, surface: -5 }}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FlatsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  Flat.destroy_all
  10.times do
    FactoryBot.create(:flat)
  end

  describe "GET #index" do
    it "returns a success response" do
      Flat.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to render_template(:index)
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      flat = Flat.create! valid_attributes
      get :show, params: {id: flat.to_param}, session: valid_session
      expect(response).to render_template(:show)
      expect(response).to be_successful
    end
    it "find the simular flat" do
      flat = Flat.create! valid_attributes
      get :show, params: {id: flat.to_param}, session: valid_session
      expect(assigns(:recommendations).size).to eq 4
      expect(assigns(:recommendations).map {|id| Flat.try(:find_by_id, id)}).not_to include(nil)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      flat = Flat.create! valid_attributes
      get :edit, params: {id: flat.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Flat" do
        expect {
          post :create, params: {flat: valid_attributes}, session: valid_session
        }.to change(Flat, :count).by(1)
      end

      it "redirects to the created flat" do
        post :create, params: {flat: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Flat.last)
      end

      it "create the associated flats" do
        post :create, params: {flat: valid_attributes}, session: valid_session
        expect(Flat.last.recommendated_flat_ids.map {|id| Flat.try(:find_by_id, id)}).not_to include(nil)
        expect(Flat.last.recommendated_flat_ids.size).to eq(4)
      end

    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {flat: invalid_attributes}, session: valid_session
        expect(response).to render_template(:new)
        expect(response).to be_successful
      end
      it "does not update the associated flats" do
        flats_update = Flat.pluck(:updated_at)
        post :create, params: {flat: invalid_attributes}, session: valid_session
        expect(Flat.pluck(:updated_at)).to eq(flats_update)
      end

    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {longitude: 10, latitude: 42, price: 300, surface: 60}
      }

      it "updates the requested flat" do
        flat = Flat.create! valid_attributes
        put :update, params: {id: flat.to_param, flat: new_attributes}, session: valid_session
        flat.reload
        expect(assigns(:flat).attributes['surface']).to match(new_attributes[:surface])
        expect(assigns(:flat).attributes['price']).to match(new_attributes[:price])
        expect(assigns(:flat).attributes['latitude']).to match(new_attributes[:latitude])
        expect(assigns(:flat).attributes['longitude']).to match(new_attributes[:longitude])

      end

      it "redirects to the flat" do
        flat = Flat.create! valid_attributes
        put :update, params: {id: flat.to_param, flat: valid_attributes}, session: valid_session
        expect(response).to redirect_to(flat)
      end

      it "update the associated flats" do
        flat = Flat.create! valid_attributes
        put :update, params: {id: flat.to_param, flat: valid_attributes}, session: valid_session
        expect(Flat.last.recommendated_flat_ids.map {|id| Flat.try(:find_by_id, id)}).not_to include(nil)
        expect(Flat.last.recommendated_flat_ids.size).to eq(4)
        expect(Flat.last.recommendated_flat_ids).not_to eq(flat.recommendated_flat_ids)
      end

    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        flat = Flat.create! valid_attributes
        put :update, params: {id: flat.to_param, flat: invalid_attributes}, session: valid_session
        expect(response).to render_template(:edit)
        expect(response).to be_successful
      end
      it "does not update the associated flats" do
        Flat.create! valid_attributes
        flat = Flat.last
        put :update, params: {id: flat.to_param, flat: invalid_attributes}, session: valid_session
        expect(Flat.last.recommendated_flat_ids).to eq(flat.recommendated_flat_ids)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested flat" do
      flat = Flat.create! valid_attributes
      expect {
        delete :destroy, params: {id: flat.to_param}, session: valid_session
      }.to change(Flat, :count).by(-1)
    end

    it "redirects to the flats list" do
      flat = Flat.create! valid_attributes
      delete :destroy, params: {id: flat.to_param}, session: valid_session
      expect(response).to redirect_to(flats_url)
    end

    it "update the associated flats" do
      flat = Flat.create! valid_attributes
      flats_update = Flat.pluck(:updated_at)
      delete :destroy, params: {id: flat.to_param}, session: valid_session
      expect(Flat.pluck(:updated_at)).not_to eq(flats_update)
    end
  end

end
